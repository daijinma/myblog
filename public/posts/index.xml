<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 生活工作记录</title>
    <link>https://example.org/posts/</link>
    <description>Recent content in Posts on 生活工作记录</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 15 May 2024 18:12:44 +0800</lastBuildDate>
    <atom:link href="https://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>揭秘Rust：为何它能成为系统级编程的明日之星？</title>
      <link>https://example.org/posts/first/</link>
      <pubDate>Wed, 15 May 2024 18:12:44 +0800</pubDate>
      <guid>https://example.org/posts/first/</guid>
      <description>Rust是系统级编程语言，支持OS内核编程与用户态编程，标准库包括CORE、ALLOC和STD库。本书适合资深C/C++或Rust程序员，用于深入了解Rust及其标准库，不适用于初学者。&#xA;Rust被设计为能编写操作系统（OS）内核的系统级编程语言，使用静态编译，不采用GC（Garbage Collection）机制。Rust具备现代编程语言的高效率语法，且开发的应用程序具有类似C语言的性能，并在代码编译阶段就能保证内存安全、并发安全、分支安全等安全性。&#xA;现代编程语言通常集成标准库。编程语言的众多关键特性都由标准库实现。采用GC机制的现代编程语言Java和Python，主要用于编写用户态程序。它们的标准库只需要支持用户态模型即可。因为是系统级编程语言，所以Rust的标准库要支持OS内核编程与用户态编程两种模型。同为系统级编程语言的C语言解决这个问题的方法是只提供用户态模型的标准库，OS内核的库由各OS自行实现。&#xA;Rust的现代编程语言特性决定了其标准库无法把OS内核编程与用户态编程区分成完全独立的两部分，所以只能更细致地进行组件设计。Rust的标准库主要包括3个组件：语言核心库——CORE库、智能指针库——ALLOC库、用户态——STD库。&#xA;Rust的标准库的调用关系如图1-1所示。&#xA;图1-1 Rust的标准库的调用关系&#xA;以上内容摘自《深入Rust标准库：必备的Rust语言高级指南》&#xA;目标读者 本书不适合初学编程的读者。本书的最佳学习对象是资深的、掌握了Rust初步语法的C/C++程序员。本书也适合已经对Rust基础语法比较熟悉的，希望对Rust有更深了解的，尤其是希望进行操作系统内核编程或通用框架编程的程序员。对于资深的Java、Python、Go程序员，可以将本书作为与其他编程语言相比较的一个参考。&#xA;阅读本书之前，读者应该已经学习过官方教程《Rust程序设计语言》。本书不是标准库参考手册，如需要参考手册，请见《Rust标准库参考手册》。</description>
    </item>
  </channel>
</rss>
